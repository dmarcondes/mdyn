#Risk vs number of confirmed per 100k cases
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,10,15)]),se = F,
aes(x = City,y = (mod_log(last_available_confirmed_per_100k_inhabitants)/mod_log(max(tmp_invert$last_available_confirmed_per_100k_inhabitants,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,10,15)]),
aes(x = City,y = (mod_log(last_available_confirmed_per_100k_inhabitants)/mod_log(max(tmp_invert$last_available_confirmed_per_100k_inhabitants,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(mod_log(max(tmp_invert$last_available_confirmed_per_100k_inhabitants,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Number of confirmed cases per 100k inhabitants",labels = function(x) round(exp(x)))) +
scale_colour_manual("Risk",values = c("red","orange"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs number of confirmed per 100k cases
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,10,15)]),se = F,
aes(x = City,y = (mod_log(last_available_confirmed_per_100k_inhabitants)/mod_log(max(tmp_invert$last_available_confirmed_per_100k_inhabitants,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,10,15)]),
aes(x = City,y = (mod_log(last_available_confirmed_per_100k_inhabitants)/mod_log(max(tmp_invert$last_available_confirmed_per_100k_inhabitants,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(mod_log(max(tmp_invert$last_available_confirmed_per_100k_inhabitants,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Number of confirmed cases per 100k inhabitants",labels = function(x) round(exp(x)))) +
scale_colour_manual("Risk",values = c("red","orange"))
pdf(file = paste("plot_risk_confirmed100k_",s,".pdf",sep = ""),width = 15,height = 10)
suppressWarnings(suppressMessages(print(p)))
dev.off()
plots[[s]][["confirmed100k"]] <- p
names(tmp_invert)
tmp <- risk_data[[s]]
tmp$date[is.na(tmp$date)] <- d
tmp <- tmp[tmp$date == d,]
tmp_invert <- tidyr::gather(tmp,"s","rank",-City,-State,-risk_lesser,-risk_greater,-risk,-dist,-populacao_estimada,
-date,-last_available_confirmed,-last_available_confirmed_per_100k_inhabitants,
-last_available_death_rate,-last_available_deaths,-state)
tmp_invert$City <- factor(tmp_invert$City,tmp_invert$City[order(tapply(tmp_invert$rank,tmp_invert$City,mean))])
tmp_invert$last_available_confirmed[is.na(tmp_invert$last_available_confirmed)] <- 0
tmp_invert$last_available_confirmed_per_100k_inhabitants[is.na(tmp_invert$last_available_confirmed_per_100k_inhabitants)] <- 0
tmp_invert$last_available_death_rate[is.na(tmp_invert$last_available_death_rate)] <- 0
tmp_invert$last_available_deaths[is.na(tmp_invert$last_available_deaths)] <- 0
#Risk vs distance to capital city
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,6,15)]),se = F,aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,6,15)]),aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(max(tmp_invert$dist,na.rm = T)/max(tmp_invert$rank,na.rm = T)),
name = "Distance to capital city (km)")) +
scale_colour_manual("Risk",values = c("orange","red"))
pdf(file = paste("plot_risk_distance_",s,".pdf",sep = ""),width = 15,height = 10)
suppressWarnings(suppressMessages(print(p)))
dev.off()
plots[[s]][["distance_capital"]] <- p
#Risk vs number of confirmed cases
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,9,15)]),se = F,
aes(x = City,y = (mod_log(last_available_confirmed)/mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,9,15)]),
aes(x = City,y = (mod_log(last_available_confirmed)/mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Number of confirmed cases",labels = function(x) round(exp(x)))) +
scale_colour_manual("Risk",values = c("red","orange"))
pdf(file = paste("plot_risk_confirmed_",s,".pdf",sep = ""),width = 15,height = 10)
suppressWarnings(suppressMessages(print(p)))
dev.off()
plots[[s]][["confirmed"]] <- p
#Risk vs number of confirmed per 100k cases
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,10,15)]),se = F,
aes(x = City,y = (mod_log(last_available_confirmed_per_100k_inhabitants)/mod_log(max(tmp_invert$last_available_confirmed_per_100k_inhabitants,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,10,15)]),
aes(x = City,y = (mod_log(last_available_confirmed_per_100k_inhabitants)/mod_log(max(tmp_invert$last_available_confirmed_per_100k_inhabitants,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(mod_log(max(tmp_invert$last_available_confirmed_per_100k_inhabitants,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Number of confirmed cases per 100k inhabitants",labels = function(x) round(exp(x)))) +
scale_colour_manual("Risk",values = c("red","orange"))
pdf(file = paste("plot_risk_confirmed100k_",s,".pdf",sep = ""),width = 15,height = 10)
suppressWarnings(suppressMessages(print(p)))
dev.off()
plots[[s]][["confirmed100k"]] <- p
names(tmp_invert)
#Risk vs number of death
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,10,15)]),se = F,
aes(x = City,y = (mod_log(last_available_deaths)/mod_log(max(tmp_invert$last_available_deaths,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,10,15)]),
aes(x = City,y = (mod_log(last_available_deaths)/mod_log(max(tmp_invert$last_available_deaths,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(mod_log(max(tmp_invert$last_available_deaths,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Number of deaths",labels = function(x) round(exp(x)))) +
scale_colour_manual("Risk",values = c("red","orange"))
suppressWarnings(suppressMessages(print(p)))
names(tmp_invert)
#Risk vs number of death
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,11,15)]),se = F,
aes(x = City,y = (mod_log(last_available_deaths)/mod_log(max(tmp_invert$last_available_deaths,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,11,15)]),
aes(x = City,y = (mod_log(last_available_deaths)/mod_log(max(tmp_invert$last_available_deaths,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(mod_log(max(tmp_invert$last_available_deaths,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Number of deaths",labels = function(x) round(exp(x)))) +
scale_colour_manual("Risk",values = c("red","orange"))
suppressWarnings(suppressMessages(print(p)))
unique(tmp_invert[c(1,11,15)])
names(tamp_invert)
names(tmp_invert)
#Risk vs number of death
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,12,15)]),se = F,
aes(x = City,y = (mod_log(last_available_deaths)/mod_log(max(tmp_invert$last_available_deaths,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,12,15)]),
aes(x = City,y = (mod_log(last_available_deaths)/mod_log(max(tmp_invert$last_available_deaths,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(mod_log(max(tmp_invert$last_available_deaths,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Number of deaths",labels = function(x) round(exp(x)))) +
scale_colour_manual("Risk",values = c("red","orange"))
suppressWarnings(suppressMessages(print(p)))
names(tmp_invert)
#Risk vs death rate
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,11,15)]),se = F,
aes(x = City,y = (mod_log(last_available_death_rate)/mod_log(max(tmp_invert$last_available_death_rate,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,11,15)]),
aes(x = City,y = (mod_log(last_available_death_rate)/mod_log(max(tmp_invert$last_available_death_rate,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(mod_log(max(tmp_invert$last_available_death_rate,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Death rate",labels = function(x) round(exp(x)))) +
scale_colour_manual("Risk",values = c("red","orange"))
suppressWarnings(suppressMessages(print(p)))
p
unique(tmp_invert[c(1,11,15)])
#Risk vs death rate
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,11,15)]),se = F,
aes(x = City,y = ((last_available_death_rate)/(max(tmp_invert$last_available_death_rate,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,11,15)]),
aes(x = City,y = ((last_available_death_rate)/(max(tmp_invert$last_available_death_rate,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*((max(tmp_invert$last_available_death_rate,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Death rate")) +
scale_colour_manual("Risk",values = c("red","orange"))
p
plots[[s]][["death_rate"]] <- p
cat(paste("Started state of",s,"\n")
plots[[s]] <- list()
for(d in day){
tmp <- risk_data[[s]]
tmp$date[is.na(tmp$date)] <- d
tmp <- tmp[tmp$date == d,]
tmp_invert <- tidyr::gather(tmp,"s","rank",-City,-State,-risk_lesser,-risk_greater,-risk,-dist,-populacao_estimada,
-date,-last_available_confirmed,-last_available_confirmed_per_100k_inhabitants,
-last_available_death_rate,-last_available_deaths,-state)
tmp_invert$City <- factor(tmp_invert$City,tmp_invert$City[order(tapply(tmp_invert$rank,tmp_invert$City,mean))])
tmp_invert$last_available_confirmed[is.na(tmp_invert$last_available_confirmed)] <- 0
tmp_invert$last_available_confirmed_per_100k_inhabitants[is.na(tmp_invert$last_available_confirmed_per_100k_inhabitants)] <- 0
tmp_invert$last_available_death_rate[is.na(tmp_invert$last_available_death_rate)] <- 0
tmp_invert$last_available_deaths[is.na(tmp_invert$last_available_deaths)] <- 0
#Risk vs distance to capital city
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,6,15)]),se = F,aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,6,15)]),aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(max(tmp_invert$dist,na.rm = T)/max(tmp_invert$rank,na.rm = T)),
name = "Distance to capital city (km)")) +
scale_colour_manual("Risk",values = c("orange","red"))
pdf(file = paste("plot_risk_distance_",s,".pdf",sep = ""),width = 15,height = 10)
suppressWarnings(suppressMessages(print(p)))
dev.off()
plots[[s]][["distance_capital"]] <- p
#Risk vs number of confirmed cases
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,9,15)]),se = F,
aes(x = City,y = (mod_log(last_available_confirmed)/mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,9,15)]),
aes(x = City,y = (mod_log(last_available_confirmed)/mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Number of confirmed cases",labels = function(x) round(exp(x)))) +
scale_colour_manual("Risk",values = c("red","orange"))
pdf(file = paste("plot_risk_confirmed_",s,".pdf",sep = ""),width = 15,height = 10)
suppressWarnings(suppressMessages(print(p)))
dev.off()
plots[[s]][["confirmed"]] <- p
#Risk vs number of confirmed per 100k cases
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,10,15)]),se = F,
aes(x = City,y = (mod_log(last_available_confirmed_per_100k_inhabitants)/mod_log(max(tmp_invert$last_available_confirmed_per_100k_inhabitants,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,10,15)]),
aes(x = City,y = (mod_log(last_available_confirmed_per_100k_inhabitants)/mod_log(max(tmp_invert$last_available_confirmed_per_100k_inhabitants,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(mod_log(max(tmp_invert$last_available_confirmed_per_100k_inhabitants,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Number of confirmed cases per 100k inhabitants",labels = function(x) round(exp(x)))) +
scale_colour_manual("Risk",values = c("red","orange"))
pdf(file = paste("plot_risk_confirmed100k_",s,".pdf",sep = ""),width = 15,height = 10)
suppressWarnings(suppressMessages(print(p)))
dev.off()
plots[[s]][["confirmed100k"]] <- p
#Risk vs number of death
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,12,15)]),se = F,
aes(x = City,y = (mod_log(last_available_deaths)/mod_log(max(tmp_invert$last_available_deaths,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,12,15)]),
aes(x = City,y = (mod_log(last_available_deaths)/mod_log(max(tmp_invert$last_available_deaths,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(mod_log(max(tmp_invert$last_available_deaths,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Number of deaths",labels = function(x) round(exp(x)))) +
scale_colour_manual("Risk",values = c("red","orange"))
pdf(file = paste("plot_risk_deaths_",s,".pdf",sep = ""),width = 15,height = 10)
suppressWarnings(suppressMessages(print(p)))
dev.off()
plots[[s]][["deaths"]] <- p
#Risk vs death rate
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,11,15)]),se = F,
aes(x = City,y = ((last_available_death_rate)/(max(tmp_invert$last_available_death_rate,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,11,15)]),
aes(x = City,y = ((last_available_death_rate)/(max(tmp_invert$last_available_death_rate,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*((max(tmp_invert$last_available_death_rate,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Death rate")) +
scale_colour_manual("Risk",values = c("red","orange"))
pdf(file = paste("plot_risk_death_rate_",s,".pdf",sep = ""),width = 15,height = 10)
suppressWarnings(suppressMessages(print(p)))
dev.off()
plots[[s]][["death_rate"]] <- p
}
return(p)
}
}
cat(paste("Started state of",s,"\n"))
n <- list("sp" = "São Paulo","rj" = "Rio de Janeiro")
cat(paste("Started state of",n[[s]],"\n"))
#Risk vs distance to capital city
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitl(paste("Risk x Distance to capital city\nState of",n[[s]],"\nGenerated from mdyn package on R. See https://github.com/pedrospeixoto/mdyn.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,6,15)]),se = F,aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,6,15)]),aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(max(tmp_invert$dist,na.rm = T)/max(tmp_invert$rank,na.rm = T)),
name = "Distance to capital city (km)")) +
scale_colour_manual("Risk",values = c("orange","red"))
#Risk vs distance to capital city
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Distance to capital city\nState of",n[[s]],"\nGenerated from mdyn package on R. See https://github.com/pedrospeixoto/mdyn.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,6,15)]),se = F,aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,6,15)]),aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(max(tmp_invert$dist,na.rm = T)/max(tmp_invert$rank,na.rm = T)),
name = "Distance to capital city (km)")) +
scale_colour_manual("Risk",values = c("orange","red"))
p
n
#Risk vs distance to capital city
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Distance to capital city\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,6,15)]),se = F,aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,6,15)]),aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(max(tmp_invert$dist,na.rm = T)/max(tmp_invert$rank,na.rm = T)),
name = "Distance to capital city (km)")) +
scale_colour_manual("Risk",values = c("orange","red"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs distance to capital city
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Distance to capital city\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\n with data from Peixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil. 2020.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,6,15)]),se = F,aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,6,15)]),aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(max(tmp_invert$dist,na.rm = T)/max(tmp_invert$rank,na.rm = T)),
name = "Distance to capital city (km)")) +
scale_colour_manual("Risk",values = c("orange","red"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs distance to capital city
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Distance to capital city\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil. 2020.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,6,15)]),se = F,aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,6,15)]),aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(max(tmp_invert$dist,na.rm = T)/max(tmp_invert$rank,na.rm = T)),
name = "Distance to capital city (km)")) +
scale_colour_manual("Risk",values = c("orange","red"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs distance to capital city
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Distance to capital city\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,6,15)]),se = F,aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,6,15)]),aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(max(tmp_invert$dist,na.rm = T)/max(tmp_invert$rank,na.rm = T)),
name = "Distance to capital city (km)")) +
scale_colour_manual("Risk",values = c("orange","red"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs number of confirmed cases
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Number of confirmed cases on",d,"\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,9,15)]),se = F,
aes(x = City,y = (mod_log(last_available_confirmed)/mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,9,15)]),
aes(x = City,y = (mod_log(last_available_confirmed)/mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Number of confirmed cases",labels = function(x) round(exp(x)))) +
scale_colour_manual("Risk",values = c("red","orange"))
p
#Risk vs distance to capital city
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Distance to capital city\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,6,15)]),se = F,aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,6,15)]),aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(max(tmp_invert$dist,na.rm = T)/max(tmp_invert$rank,na.rm = T)),
name = "Distance to capital city (km)")) +
scale_colour_manual("Risk",values = c("orange","red"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs distance to capital city
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Distance to capital city\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,6,15)]),se = F,aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,6,15)]),aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(max(tmp_invert$dist,na.rm = T)/max(tmp_invert$rank,na.rm = T)),
name = "Distance to capital city (km)")) +
scale_colour_manual("Risk",values = c("red","orange"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs number of confirmed cases
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Number of confirmed cases on",d,"\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,9,15)]),se = F,
aes(x = City,y = (mod_log(last_available_confirmed)/mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,9,15)]),
aes(x = City,y = (mod_log(last_available_confirmed)/mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Number of confirmed cases",labels = function(x) round(exp(x)))) +
scale_colour_manual("Risk",values = c("red","orange"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs number of confirmed cases per 100k
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Number of confirmed cases per 100k inhabitants on",d,"\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,10,15)]),se = F,
aes(x = City,y = (mod_log(last_available_confirmed_per_100k_inhabitants)/mod_log(max(tmp_invert$last_available_confirmed_per_100k_inhabitants,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,10,15)]),
aes(x = City,y = (mod_log(last_available_confirmed_per_100k_inhabitants)/mod_log(max(tmp_invert$last_available_confirmed_per_100k_inhabitants,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(mod_log(max(tmp_invert$last_available_confirmed_per_100k_inhabitants,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Number of confirmed cases per 100k inhabitants",labels = function(x) round(exp(x)))) +
scale_colour_manual("Risk",values = c("red","orange"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs number of death
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Number of deaths on",d,"\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,12,15)]),se = F,
aes(x = City,y = (mod_log(last_available_deaths)/mod_log(max(tmp_invert$last_available_deaths,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,12,15)]),
aes(x = City,y = (mod_log(last_available_deaths)/mod_log(max(tmp_invert$last_available_deaths,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(mod_log(max(tmp_invert$last_available_deaths,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Number of deaths",labels = function(x) round(exp(x)))) +
scale_colour_manual("Risk",values = c("red","orange"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs death rate
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Death rate on",d,"\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,11,15)]),se = F,
aes(x = City,y = ((last_available_death_rate)/(max(tmp_invert$last_available_death_rate,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,11,15)]),
aes(x = City,y = ((last_available_death_rate)/(max(tmp_invert$last_available_death_rate,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*((max(tmp_invert$last_available_death_rate,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Death rate")) +
scale_colour_manual("Risk",values = c("red","orange"))
suppressWarnings(suppressMessages(print(p)))
document()
library(devtools)
document
document()
c <- risk[["sp]]$City[risk[["sp"]]$populacao_estimada > 500000,]
c <- risk[["sp"]]$City[risk[["sp"]]$populacao_estimada > 500000,]
c <- risk[["sp"]]$City[risk[["sp"]]$populacao_estimada > 500000]
c
document()
pos_name = "pop"
document()
library(devtools)
document()
document()
library(mdyn)
p <- plotRisk_cases()
p <- plotRisk_cases(day = "2020-04-09")
c <- risk[["sp"]]$City[risk[["sp"]]$populacao_estimada > 500000]
p <- plotRisk_cases(states = "sp",day = "2020-04-09",cities = list("sp" = c),pos_name = "500k")
p <- plotRisk_cases(day.init = "2020-03-01",day.final = "2020-04-09")
library(mdyn)
document()
library(mdyn)
library(mdyn)
library(mdyn)
library(mdyn)
build_manual()
remove.packages("mdyn", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
library(devtools)
install_github("pedrospeixoto/mdyn/Rpack/mdyn/")
