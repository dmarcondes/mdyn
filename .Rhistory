-date,-last_available_confirmed,-last_available_confirmed_per_100k_inhabitants,
-last_available_death_rate,-last_available_deaths,-state)
tmp_invert$City <- factor(tmp_invert$City,tmp_invert$City[order(tapply(tmp_invert$rank,tmp_invert$City,mean))])
tmp_invert$last_available_confirmed[is.na(tmp_invert$last_available_confirmed)] <- 0
tmp_invert$last_available_confirmed_per_100k_inhabitants[is.na(tmp_invert$last_available_confirmed_per_100k_inhabitants)] <- 0
tmp_invert$last_available_death_rate[is.na(tmp_invert$last_available_death_rate)] <- 0
tmp_invert$last_available_deaths[is.na(tmp_invert$last_available_deaths)] <- 0
#Risk vs distance to capital city
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,6,15)]),se = F,aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,6,15)]),aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(max(tmp_invert$dist,na.rm = T)/max(tmp_invert$rank,na.rm = T)),
name = "Distance to capital city (km)")) +
scale_colour_manual("Risk",values = c("orange","red"))
pdf(file = paste("plot_risk_distance_",s,".pdf",sep = ""),width = 15,height = 10)
suppressWarnings(suppressMessages(print(p)))
dev.off()
plots[[s]][["distance_capital"]] <- p
#Risk vs number of confirmed cases
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,9,15)]),se = F,
aes(x = City,y = (mod_log(last_available_confirmed)/mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,9,15)]),
aes(x = City,y = (mod_log(last_available_confirmed)/mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Number of confirmed cases",labels = function(x) round(exp(x)))) +
scale_colour_manual("Risk",values = c("red","orange"))
pdf(file = paste("plot_risk_confirmed_",s,".pdf",sep = ""),width = 15,height = 10)
suppressWarnings(suppressMessages(print(p)))
dev.off()
plots[[s]][["confirmed"]] <- p
#Risk vs number of confirmed per 100k cases
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,10,15)]),se = F,
aes(x = City,y = (mod_log(last_available_confirmed_per_100k_inhabitants)/mod_log(max(tmp_invert$last_available_confirmed_per_100k_inhabitants,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,10,15)]),
aes(x = City,y = (mod_log(last_available_confirmed_per_100k_inhabitants)/mod_log(max(tmp_invert$last_available_confirmed_per_100k_inhabitants,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(mod_log(max(tmp_invert$last_available_confirmed_per_100k_inhabitants,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Number of confirmed cases per 100k inhabitants",labels = function(x) round(exp(x)))) +
scale_colour_manual("Risk",values = c("red","orange"))
pdf(file = paste("plot_risk_confirmed100k_",s,".pdf",sep = ""),width = 15,height = 10)
suppressWarnings(suppressMessages(print(p)))
dev.off()
plots[[s]][["confirmed100k"]] <- p
#Risk vs number of death
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,12,15)]),se = F,
aes(x = City,y = (mod_log(last_available_deaths)/mod_log(max(tmp_invert$last_available_deaths,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,12,15)]),
aes(x = City,y = (mod_log(last_available_deaths)/mod_log(max(tmp_invert$last_available_deaths,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(mod_log(max(tmp_invert$last_available_deaths,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Number of deaths",labels = function(x) round(exp(x)))) +
scale_colour_manual("Risk",values = c("red","orange"))
pdf(file = paste("plot_risk_deaths_",s,".pdf",sep = ""),width = 15,height = 10)
suppressWarnings(suppressMessages(print(p)))
dev.off()
plots[[s]][["deaths"]] <- p
#Risk vs death rate
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,11,15)]),se = F,
aes(x = City,y = ((last_available_death_rate)/(max(tmp_invert$last_available_death_rate,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,11,15)]),
aes(x = City,y = ((last_available_death_rate)/(max(tmp_invert$last_available_death_rate,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*((max(tmp_invert$last_available_death_rate,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Death rate")) +
scale_colour_manual("Risk",values = c("red","orange"))
pdf(file = paste("plot_risk_death_rate_",s,".pdf",sep = ""),width = 15,height = 10)
suppressWarnings(suppressMessages(print(p)))
dev.off()
plots[[s]][["death_rate"]] <- p
}
return(p)
}
}
cat(paste("Started state of",s,"\n"))
n <- list("sp" = "SÃ£o Paulo","rj" = "Rio de Janeiro")
cat(paste("Started state of",n[[s]],"\n"))
#Risk vs distance to capital city
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitl(paste("Risk x Distance to capital city\nState of",n[[s]],"\nGenerated from mdyn package on R. See https://github.com/pedrospeixoto/mdyn.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,6,15)]),se = F,aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,6,15)]),aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(max(tmp_invert$dist,na.rm = T)/max(tmp_invert$rank,na.rm = T)),
name = "Distance to capital city (km)")) +
scale_colour_manual("Risk",values = c("orange","red"))
#Risk vs distance to capital city
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Distance to capital city\nState of",n[[s]],"\nGenerated from mdyn package on R. See https://github.com/pedrospeixoto/mdyn.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,6,15)]),se = F,aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,6,15)]),aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(max(tmp_invert$dist,na.rm = T)/max(tmp_invert$rank,na.rm = T)),
name = "Distance to capital city (km)")) +
scale_colour_manual("Risk",values = c("orange","red"))
p
n
#Risk vs distance to capital city
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Distance to capital city\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,6,15)]),se = F,aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,6,15)]),aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(max(tmp_invert$dist,na.rm = T)/max(tmp_invert$rank,na.rm = T)),
name = "Distance to capital city (km)")) +
scale_colour_manual("Risk",values = c("orange","red"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs distance to capital city
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Distance to capital city\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\n with data from Peixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil. 2020.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,6,15)]),se = F,aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,6,15)]),aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(max(tmp_invert$dist,na.rm = T)/max(tmp_invert$rank,na.rm = T)),
name = "Distance to capital city (km)")) +
scale_colour_manual("Risk",values = c("orange","red"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs distance to capital city
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Distance to capital city\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil. 2020.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,6,15)]),se = F,aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,6,15)]),aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(max(tmp_invert$dist,na.rm = T)/max(tmp_invert$rank,na.rm = T)),
name = "Distance to capital city (km)")) +
scale_colour_manual("Risk",values = c("orange","red"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs distance to capital city
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Distance to capital city\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,6,15)]),se = F,aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,6,15)]),aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(max(tmp_invert$dist,na.rm = T)/max(tmp_invert$rank,na.rm = T)),
name = "Distance to capital city (km)")) +
scale_colour_manual("Risk",values = c("orange","red"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs number of confirmed cases
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Number of confirmed cases on",d,"\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,9,15)]),se = F,
aes(x = City,y = (mod_log(last_available_confirmed)/mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,9,15)]),
aes(x = City,y = (mod_log(last_available_confirmed)/mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Number of confirmed cases",labels = function(x) round(exp(x)))) +
scale_colour_manual("Risk",values = c("red","orange"))
p
#Risk vs distance to capital city
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Distance to capital city\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,6,15)]),se = F,aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,6,15)]),aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(max(tmp_invert$dist,na.rm = T)/max(tmp_invert$rank,na.rm = T)),
name = "Distance to capital city (km)")) +
scale_colour_manual("Risk",values = c("orange","red"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs distance to capital city
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Distance to capital city\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,6,15)]),se = F,aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,6,15)]),aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(max(tmp_invert$dist,na.rm = T)/max(tmp_invert$rank,na.rm = T)),
name = "Distance to capital city (km)")) +
scale_colour_manual("Risk",values = c("red","orange"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs number of confirmed cases
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Number of confirmed cases on",d,"\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,9,15)]),se = F,
aes(x = City,y = (mod_log(last_available_confirmed)/mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,9,15)]),
aes(x = City,y = (mod_log(last_available_confirmed)/mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Number of confirmed cases",labels = function(x) round(exp(x)))) +
scale_colour_manual("Risk",values = c("red","orange"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs number of confirmed cases per 100k
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Number of confirmed cases per 100k inhabitants on",d,"\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,10,15)]),se = F,
aes(x = City,y = (mod_log(last_available_confirmed_per_100k_inhabitants)/mod_log(max(tmp_invert$last_available_confirmed_per_100k_inhabitants,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,10,15)]),
aes(x = City,y = (mod_log(last_available_confirmed_per_100k_inhabitants)/mod_log(max(tmp_invert$last_available_confirmed_per_100k_inhabitants,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(mod_log(max(tmp_invert$last_available_confirmed_per_100k_inhabitants,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Number of confirmed cases per 100k inhabitants",labels = function(x) round(exp(x)))) +
scale_colour_manual("Risk",values = c("red","orange"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs number of death
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Number of deaths on",d,"\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,12,15)]),se = F,
aes(x = City,y = (mod_log(last_available_deaths)/mod_log(max(tmp_invert$last_available_deaths,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,12,15)]),
aes(x = City,y = (mod_log(last_available_deaths)/mod_log(max(tmp_invert$last_available_deaths,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(mod_log(max(tmp_invert$last_available_deaths,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Number of deaths",labels = function(x) round(exp(x)))) +
scale_colour_manual("Risk",values = c("red","orange"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs death rate
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Death rate on",d,"\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,11,15)]),se = F,
aes(x = City,y = ((last_available_death_rate)/(max(tmp_invert$last_available_death_rate,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,11,15)]),
aes(x = City,y = ((last_available_death_rate)/(max(tmp_invert$last_available_death_rate,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*((max(tmp_invert$last_available_death_rate,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Death rate")) +
scale_colour_manual("Risk",values = c("red","orange"))
suppressWarnings(suppressMessages(print(p)))
document()
library(devtools)
document
document()
c <- risk[["sp]]$City[risk[["sp"]]$populacao_estimada > 500000,]
c <- risk[["sp"]]$City[risk[["sp"]]$populacao_estimada > 500000,]
c <- risk[["sp"]]$City[risk[["sp"]]$populacao_estimada > 500000]
c
document()
pos_name = "pop"
document()
library(devtools)
document()
document()
library(mdyn)
p <- plotRisk_cases()
p <- plotRisk_cases(day = "2020-04-09")
c <- risk[["sp"]]$City[risk[["sp"]]$populacao_estimada > 500000]
p <- plotRisk_cases(states = "sp",day = "2020-04-09",cities = list("sp" = c),pos_name = "500k")
p <- plotRisk_cases(day.init = "2020-03-01",day.final = "2020-04-09")
library(mdyn)
document()
library(mdyn)
library(mdyn)
library(mdyn)
library(mdyn)
build_manual()
remove.packages("mdyn", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
library(devtools)
install_github("pedrospeixoto/mdyn/Rpack/mdyn/")
library(devtools)
install_github("dmarcondes/mdyn")
library(mdyn)
p <- risk
p
p <- plotRisk_cases()
library(mdyn)
p <- plotRisk_cases()
theme
theme
library(devtools)
document()
document()
document()
document()
document()
document()
document()
library(mdyn)
p <- plotRisk_cases()
remove.packages("mdyn", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
library(devtools)
install_github("dmarcondes/mdyn")
library(mdyn)
p <- plotRisk_cases(day = "2020-04-05")
library(autoAnalise)
library(readxl)
setwd("~/GDrive/Assessoria EstatÃ­stica/EstatÃ­stica/2020/Camila de Freitas/Figuras")
#wd
setwd("~/GDrive/Assessoria EstatÃ­stica/EstatÃ­stica/2020/Camila de Freitas/Figuras")
#dados
dados <- data.frame(read_xlsx("~/GDrive/Assessoria EstatÃ­stica/EstatÃ­stica/2020/Camila de Freitas/Dados/dados_camila.xlsx"))
summary(dados)
#dados
dados <- data.frame(read_xlsx("~/GDrive/Assessoria EstatÃ­stica/EstatÃ­stica/2020/Camila de Freitas/Dados/dados_camila.xlsx"))
summary(dados)
#dados
dados <- data.frame(read_xlsx("~/GDrive/Assessoria EstatÃ­stica/EstatÃ­stica/2020/Camila de Freitas/Dados/dados_camila.xlsx"))
summary(dados)
dados$temp_linf <- as.numeric(dados$temp_linf)
dados$temp_linf
summary(dados)
#dados
dados <- data.frame(read_xlsx("~/GDrive/Assessoria EstatÃ­stica/EstatÃ­stica/2020/Camila de Freitas/Dados/dados_camila.xlsx"))
summary(dados)
for(i in c(1:19)[-c(2,4)])
dados[,i] <- factor(dados[,i])
summary(dados)
library(plyr)
dados$sexo <- mapvalues(dados$sexo,from = c("F","M"),to = c("Feminino","Masculino"))
summary(dados)
for(i in c(5:14))
dados[,i] <- mapvalues(dados[,i],from = c("S","N"),to = c("Sim","NÃ£o"))
summary(dados)
dados$hiv <- mapvalues(dados$hiv,c("P"),c("Positivo"))
summary(dados)
dados$sifilis <- mapvalues(dados$sifilis,c("P"),c("Positivo"))
summary(dados)
######Descritiva Marginal#####
tabela <- 1
figura <- 1
ap <- F
dic <- data.frame(read_xlsx("~/GDrive/Assessoria EstatÃ­stica/EstatÃ­stica/2020/Camila de Freitas/Dados/dados_camila.xlsx",sheet = 2))
View(dic)
######Descritiva Marginal#####
tabela <- 1
figura <- 1
ap <- F
for(i in 2:19){
a <- auto_resumo(x = dados[,i],tipo = "fp",labx = dic$label[dic$var == names(dados)[i]],
latex = T,excel = T,arquivo = "tabelas_camila.xlsx",
planilha = paste("Tabela",tabela),anexar = ap,digits = 1)
ap <- T
cat("\n")
p <- auto_grafico(x = dados[,i],x.lab = dic$label[dic$var == names(dados)[i]],salvar = T,
arquivo = paste("Figura",figura,".pdf",sep = ""),latex = T)
cat("\n")
tabela <- tabela + 1
figura <- figura + 1
}
i
p <- auto_grafico(x = dados[,i],x.lab = dic$label[dic$var == names(dados)[i]],salvar = T,
arquivo = paste("Figura",figura,".pdf",sep = ""),latex = T)
dados[,i]
p <- auto_grafico(x = na.omit(dados[,i]),x.lab = dic$label[dic$var == names(dados)[i]],salvar = T,
arquivo = paste("Figura",figura,".pdf",sep = ""),latex = T)
######Descritiva Marginal#####
tabela <- 1
figura <- 1
ap <- F
for(i in 2:19){
a <- auto_resumo(x = dados[,i],tipo = "fp",labx = dic$label[dic$var == names(dados)[i]],
latex = T,excel = T,arquivo = "tabelas_camila.xlsx",
planilha = paste("Tabela",tabela),anexar = ap,digits = 1)
ap <- T
cat("\n")
p <- auto_grafico(x = na.omit(dados[,i]),x.lab = dic$label[dic$var == names(dados)[i]],salvar = T,
arquivo = paste("Figura",figura,".pdf",sep = ""),latex = T)
cat("\n")
tabela <- tabela + 1
figura <- figura + 1
}
tabela
figura
######RelaÃ§Ã£o com classificaÃ§Ã£o#######
dados$classific
levels(dados$classific)
######RelaÃ§Ã£o com classificaÃ§Ã£o#######
dados$classific <- mapvalues(dados$classific,levels(dados$classific),c(NA,NA,"Infeccioso","NÃ£o infeccioso"))
v <- dic$var[dic$var_exp == 1]
summary(dados)
names(dados)
for(i in 1:15)
dados[,i] <- mapvalues(dados[,i],c("NR","NE"),c(NA,NA))
summary(dados)
library(tidyverse)
shapiro.test(dados$idade)
shapiro.test(dados$temp_linf)
cat("Realizou-se Teste de Normalidade de Shapiro-Wilk para testar se a dstribuiÃ§Ã£o da idade e do tempo sÃ£o normais, hipÃ³tese que foi rejeitada (p < 0,001). Logo, iremos aplicar o Teste de Wilcoxon para comparar os grupos Infeccioso e NÃ£o infeccioso em relaÃ§Ã£o Ã  essas variÃ¡veis.")
######RelaÃ§Ã£o com classificaÃ§Ã£o#######
cat("\n")
cat("Realizou-se Teste de Normalidade de Shapiro-Wilk para testar se a dstribuiÃ§Ã£o da idade e do tempo sÃ£o normais, hipÃ³tese que foi rejeitada (p < 0,001). Logo, iremos aplicar o Teste de Wilcoxon para comparar os grupos Infeccioso e NÃ£o infeccioso em relaÃ§Ã£o Ã  essas variÃ¡veis.")
cat("\n")
dados$classific <- mapvalues(dados$classific,levels(dados$classific),c(NA,NA,"Infeccioso","NÃ£o infeccioso"))
v <- dic$var[dic$var_exp == 1]
for(i in 1:15)
dados[,i] <- mapvalues(dados[,i],c("NR","NE"),c(NA,NA))
for(i in v){
tmp <- dados %>% select("classific",v)
if(is.numeric(tmp[[v]]))
t <- "wilcoxon"
else
t <- "fisher"
a <- auto_resumo(x = tmp[[v]],y = tmp$classific,tipo = "fpl",teste = t,margem = T,
labx = dic$label[dic$var == v],laby = dic$label[dic$var == "classific"],
latex = T,excel = T,arquivo = "tabelas_camila.xlsx",
planilha = paste("Tabela",tabela),anexar = T,digits = 2)
cat("\n")
tmp <- na.omit(tmp)
p <- auto_grafico(x = tmp[[v]],y = tmp$classific,x.lab = dic$label[dic$var == v],
y.lab = dic$label[dic$var == "classific"],salvar = T,
arquivo = paste("Figura",figura,".pdf",sep = ""),latex = T)
cat("\n")
figura <- figura + 1
tabela <- tabela + 1
}
tmp <- dados %>% select("classific",v)
is.numeric(tmp[[v]])
tmp <- dados %>% select("classific",i)
if(is.numeric(tmp[[i]]))
t <- "wilcoxon"
t
v <- dic$var[dic$var_exp == 1]
for(i in v){
tmp <- dados %>% select("classific",i)
if(is.numeric(tmp[[i]]))
t <- "wilcoxon"
else
t <- "fisher"
a <- auto_resumo(x = tmp[[i]],y = tmp$classific,tipo = "fpl",teste = t,margem = T,
labx = dic$label[dic$var == i],laby = dic$label[dic$var == "classific"],
latex = T,excel = T,arquivo = "tabelas_camila.xlsx",
planilha = paste("Tabela",tabela),anexar = T,digits = 2)
cat("\n")
tmp <- na.omit(tmp)
p <- auto_grafico(x = tmp[[i]],y = tmp$classific,x.lab = dic$label[dic$var == i],
y.lab = dic$label[dic$var == "classific"],salvar = T,
arquivo = paste("Figura",figura,".pdf",sep = ""),latex = T)
cat("\n")
figura <- figura + 1
tabela <- tabela + 1
}
levels(dados$classific)
summary(dados)
#####Modelos de RegressÃ£o#####
dados$classific <- as.numeric(as.character(mapvalues(dados$classific,levels(dados$classific),c(1,0))))
summary(dados)
m <- auto_modelo(dados = dados,resp = "classific",exp = dic$var[dic$var_exp == 1],
modelo = "logistica",latex = T,excel = T,nomes = dic$label[dic$var_exp == 1],
arquivo = "tabelas_camila.xlsx",planilha = paste("Tabela",tabela),anexar = T,digits = 2)
View(m)
table(dados$classific,dados$hist_neo)
prop.table(table(dados$classific,dados$hist_neo),1)
prop.table(table(dados$classific,dados$hist_neo),2)
a <- glm(classific ~ hist_neo,family = binomial(),data = dados)
summary(a)
library(caret)
install.packages("caret")
