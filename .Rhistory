scale_y_continuous(sec.axis = sec_axis(~.*(max(tmp_invert$dist,na.rm = T)/max(tmp_invert$rank,na.rm = T)),
name = "Distance to capital city (km)")) +
scale_colour_manual("Risk",values = c("orange","red"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs distance to capital city
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Distance to capital city\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil. 2020.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,6,15)]),se = F,aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,6,15)]),aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(max(tmp_invert$dist,na.rm = T)/max(tmp_invert$rank,na.rm = T)),
name = "Distance to capital city (km)")) +
scale_colour_manual("Risk",values = c("orange","red"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs distance to capital city
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Distance to capital city\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,6,15)]),se = F,aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,6,15)]),aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(max(tmp_invert$dist,na.rm = T)/max(tmp_invert$rank,na.rm = T)),
name = "Distance to capital city (km)")) +
scale_colour_manual("Risk",values = c("orange","red"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs number of confirmed cases
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Number of confirmed cases on",d,"\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,9,15)]),se = F,
aes(x = City,y = (mod_log(last_available_confirmed)/mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,9,15)]),
aes(x = City,y = (mod_log(last_available_confirmed)/mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Number of confirmed cases",labels = function(x) round(exp(x)))) +
scale_colour_manual("Risk",values = c("red","orange"))
p
#Risk vs distance to capital city
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Distance to capital city\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,6,15)]),se = F,aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,6,15)]),aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(max(tmp_invert$dist,na.rm = T)/max(tmp_invert$rank,na.rm = T)),
name = "Distance to capital city (km)")) +
scale_colour_manual("Risk",values = c("orange","red"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs distance to capital city
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Distance to capital city\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,6,15)]),se = F,aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,6,15)]),aes(x = City,y = (dist/max(tmp_invert$dist,na.rm = T)) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(max(tmp_invert$dist,na.rm = T)/max(tmp_invert$rank,na.rm = T)),
name = "Distance to capital city (km)")) +
scale_colour_manual("Risk",values = c("red","orange"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs number of confirmed cases
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Number of confirmed cases on",d,"\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,9,15)]),se = F,
aes(x = City,y = (mod_log(last_available_confirmed)/mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,9,15)]),
aes(x = City,y = (mod_log(last_available_confirmed)/mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(mod_log(max(tmp_invert$last_available_confirmed,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Number of confirmed cases",labels = function(x) round(exp(x)))) +
scale_colour_manual("Risk",values = c("red","orange"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs number of confirmed cases per 100k
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Number of confirmed cases per 100k inhabitants on",d,"\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,10,15)]),se = F,
aes(x = City,y = (mod_log(last_available_confirmed_per_100k_inhabitants)/mod_log(max(tmp_invert$last_available_confirmed_per_100k_inhabitants,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,10,15)]),
aes(x = City,y = (mod_log(last_available_confirmed_per_100k_inhabitants)/mod_log(max(tmp_invert$last_available_confirmed_per_100k_inhabitants,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(mod_log(max(tmp_invert$last_available_confirmed_per_100k_inhabitants,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Number of confirmed cases per 100k inhabitants",labels = function(x) round(exp(x)))) +
scale_colour_manual("Risk",values = c("red","orange"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs number of death
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Number of deaths on",d,"\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,12,15)]),se = F,
aes(x = City,y = (mod_log(last_available_deaths)/mod_log(max(tmp_invert$last_available_deaths,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,12,15)]),
aes(x = City,y = (mod_log(last_available_deaths)/mod_log(max(tmp_invert$last_available_deaths,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*(mod_log(max(tmp_invert$last_available_deaths,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Number of deaths",labels = function(x) round(exp(x)))) +
scale_colour_manual("Risk",values = c("red","orange"))
suppressWarnings(suppressMessages(print(p)))
#Risk vs death rate
p <- ggplot(tmp_invert,aes(x = City,y = rank,colour = risk)) +
ggtitle(paste("Risk x Death rate on",d,"\nState of",n[[s]],"\nGenerated from mdyn package on R (https://github.com/pedrospeixoto/mdyn)\nPeixoto, et. al. Modeling future spread of infections via mobile geolocation data and population dynamics. An application to COVID-19 in Brazil.")) +
geom_point(aes(y = max(tmp_invert$rank,na.rm = T)-rank)) +
geom_smooth(data = unique(tmp_invert[c(1,11,15)]),se = F,
aes(x = City,y = ((last_available_death_rate)/(max(tmp_invert$last_available_death_rate,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
group = 1),color = "gray") +
geom_point(data = unique(tmp_invert[c(1,5,11,15)]),
aes(x = City,y = ((last_available_death_rate)/(max(tmp_invert$last_available_death_rate,na.rm = T))) * max(tmp_invert$rank,na.rm = T),
colour = risk),pch = 2) +
themes + titles + theme(axis.text.x = element_text(angle = 90, hjust = 1),panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) + ylab("Rank of Infection") +
scale_y_continuous(sec.axis = sec_axis(~.*((max(tmp_invert$last_available_death_rate,na.rm = T))/max(tmp_invert$rank,na.rm = T)),
name = "Death rate")) +
scale_colour_manual("Risk",values = c("red","orange"))
suppressWarnings(suppressMessages(print(p)))
document()
library(devtools)
document
document()
c <- risk[["sp]]$City[risk[["sp"]]$populacao_estimada > 500000,]
c <- risk[["sp"]]$City[risk[["sp"]]$populacao_estimada > 500000,]
c <- risk[["sp"]]$City[risk[["sp"]]$populacao_estimada > 500000]
c
document()
pos_name = "pop"
document()
library(devtools)
document()
document()
library(mdyn)
p <- plotRisk_cases()
p <- plotRisk_cases(day = "2020-04-09")
c <- risk[["sp"]]$City[risk[["sp"]]$populacao_estimada > 500000]
p <- plotRisk_cases(states = "sp",day = "2020-04-09",cities = list("sp" = c),pos_name = "500k")
p <- plotRisk_cases(day.init = "2020-03-01",day.final = "2020-04-09")
library(mdyn)
document()
library(mdyn)
library(mdyn)
library(mdyn)
library(mdyn)
build_manual()
remove.packages("mdyn", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
library(devtools)
install_github("pedrospeixoto/mdyn/Rpack/mdyn/")
library(devtools)
install_github("dmarcondes/mdyn")
library(mdyn)
p <- risk
p
p <- plotRisk_cases()
library(mdyn)
p <- plotRisk_cases()
theme
theme
library(devtools)
document()
document()
document()
document()
document()
document()
document()
library(mdyn)
p <- plotRisk_cases()
remove.packages("mdyn", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
library(devtools)
install_github("dmarcondes/mdyn")
library(mdyn)
p <- plotRisk_cases(day = "2020-04-05")
library(autoAnalise)
library(readxl)
setwd("~/GDrive/Assessoria Estatística/Estatística/2020/Camila de Freitas/Figuras")
#wd
setwd("~/GDrive/Assessoria Estatística/Estatística/2020/Camila de Freitas/Figuras")
#dados
dados <- data.frame(read_xlsx("~/GDrive/Assessoria Estatística/Estatística/2020/Camila de Freitas/Dados/dados_camila.xlsx"))
summary(dados)
#dados
dados <- data.frame(read_xlsx("~/GDrive/Assessoria Estatística/Estatística/2020/Camila de Freitas/Dados/dados_camila.xlsx"))
summary(dados)
#dados
dados <- data.frame(read_xlsx("~/GDrive/Assessoria Estatística/Estatística/2020/Camila de Freitas/Dados/dados_camila.xlsx"))
summary(dados)
dados$temp_linf <- as.numeric(dados$temp_linf)
dados$temp_linf
summary(dados)
#dados
dados <- data.frame(read_xlsx("~/GDrive/Assessoria Estatística/Estatística/2020/Camila de Freitas/Dados/dados_camila.xlsx"))
summary(dados)
for(i in c(1:19)[-c(2,4)])
dados[,i] <- factor(dados[,i])
summary(dados)
library(plyr)
dados$sexo <- mapvalues(dados$sexo,from = c("F","M"),to = c("Feminino","Masculino"))
summary(dados)
for(i in c(5:14))
dados[,i] <- mapvalues(dados[,i],from = c("S","N"),to = c("Sim","Não"))
summary(dados)
dados$hiv <- mapvalues(dados$hiv,c("P"),c("Positivo"))
summary(dados)
dados$sifilis <- mapvalues(dados$sifilis,c("P"),c("Positivo"))
summary(dados)
######Descritiva Marginal#####
tabela <- 1
figura <- 1
ap <- F
dic <- data.frame(read_xlsx("~/GDrive/Assessoria Estatística/Estatística/2020/Camila de Freitas/Dados/dados_camila.xlsx",sheet = 2))
View(dic)
######Descritiva Marginal#####
tabela <- 1
figura <- 1
ap <- F
for(i in 2:19){
a <- auto_resumo(x = dados[,i],tipo = "fp",labx = dic$label[dic$var == names(dados)[i]],
latex = T,excel = T,arquivo = "tabelas_camila.xlsx",
planilha = paste("Tabela",tabela),anexar = ap,digits = 1)
ap <- T
cat("\n")
p <- auto_grafico(x = dados[,i],x.lab = dic$label[dic$var == names(dados)[i]],salvar = T,
arquivo = paste("Figura",figura,".pdf",sep = ""),latex = T)
cat("\n")
tabela <- tabela + 1
figura <- figura + 1
}
i
p <- auto_grafico(x = dados[,i],x.lab = dic$label[dic$var == names(dados)[i]],salvar = T,
arquivo = paste("Figura",figura,".pdf",sep = ""),latex = T)
dados[,i]
p <- auto_grafico(x = na.omit(dados[,i]),x.lab = dic$label[dic$var == names(dados)[i]],salvar = T,
arquivo = paste("Figura",figura,".pdf",sep = ""),latex = T)
######Descritiva Marginal#####
tabela <- 1
figura <- 1
ap <- F
for(i in 2:19){
a <- auto_resumo(x = dados[,i],tipo = "fp",labx = dic$label[dic$var == names(dados)[i]],
latex = T,excel = T,arquivo = "tabelas_camila.xlsx",
planilha = paste("Tabela",tabela),anexar = ap,digits = 1)
ap <- T
cat("\n")
p <- auto_grafico(x = na.omit(dados[,i]),x.lab = dic$label[dic$var == names(dados)[i]],salvar = T,
arquivo = paste("Figura",figura,".pdf",sep = ""),latex = T)
cat("\n")
tabela <- tabela + 1
figura <- figura + 1
}
tabela
figura
######Relação com classificação#######
dados$classific
levels(dados$classific)
######Relação com classificação#######
dados$classific <- mapvalues(dados$classific,levels(dados$classific),c(NA,NA,"Infeccioso","Não infeccioso"))
v <- dic$var[dic$var_exp == 1]
summary(dados)
names(dados)
for(i in 1:15)
dados[,i] <- mapvalues(dados[,i],c("NR","NE"),c(NA,NA))
summary(dados)
library(tidyverse)
shapiro.test(dados$idade)
shapiro.test(dados$temp_linf)
cat("Realizou-se Teste de Normalidade de Shapiro-Wilk para testar se a dstribuição da idade e do tempo são normais, hipótese que foi rejeitada (p < 0,001). Logo, iremos aplicar o Teste de Wilcoxon para comparar os grupos Infeccioso e Não infeccioso em relação à essas variáveis.")
######Relação com classificação#######
cat("\n")
cat("Realizou-se Teste de Normalidade de Shapiro-Wilk para testar se a dstribuição da idade e do tempo são normais, hipótese que foi rejeitada (p < 0,001). Logo, iremos aplicar o Teste de Wilcoxon para comparar os grupos Infeccioso e Não infeccioso em relação à essas variáveis.")
cat("\n")
dados$classific <- mapvalues(dados$classific,levels(dados$classific),c(NA,NA,"Infeccioso","Não infeccioso"))
v <- dic$var[dic$var_exp == 1]
for(i in 1:15)
dados[,i] <- mapvalues(dados[,i],c("NR","NE"),c(NA,NA))
for(i in v){
tmp <- dados %>% select("classific",v)
if(is.numeric(tmp[[v]]))
t <- "wilcoxon"
else
t <- "fisher"
a <- auto_resumo(x = tmp[[v]],y = tmp$classific,tipo = "fpl",teste = t,margem = T,
labx = dic$label[dic$var == v],laby = dic$label[dic$var == "classific"],
latex = T,excel = T,arquivo = "tabelas_camila.xlsx",
planilha = paste("Tabela",tabela),anexar = T,digits = 2)
cat("\n")
tmp <- na.omit(tmp)
p <- auto_grafico(x = tmp[[v]],y = tmp$classific,x.lab = dic$label[dic$var == v],
y.lab = dic$label[dic$var == "classific"],salvar = T,
arquivo = paste("Figura",figura,".pdf",sep = ""),latex = T)
cat("\n")
figura <- figura + 1
tabela <- tabela + 1
}
tmp <- dados %>% select("classific",v)
is.numeric(tmp[[v]])
tmp <- dados %>% select("classific",i)
if(is.numeric(tmp[[i]]))
t <- "wilcoxon"
t
v <- dic$var[dic$var_exp == 1]
for(i in v){
tmp <- dados %>% select("classific",i)
if(is.numeric(tmp[[i]]))
t <- "wilcoxon"
else
t <- "fisher"
a <- auto_resumo(x = tmp[[i]],y = tmp$classific,tipo = "fpl",teste = t,margem = T,
labx = dic$label[dic$var == i],laby = dic$label[dic$var == "classific"],
latex = T,excel = T,arquivo = "tabelas_camila.xlsx",
planilha = paste("Tabela",tabela),anexar = T,digits = 2)
cat("\n")
tmp <- na.omit(tmp)
p <- auto_grafico(x = tmp[[i]],y = tmp$classific,x.lab = dic$label[dic$var == i],
y.lab = dic$label[dic$var == "classific"],salvar = T,
arquivo = paste("Figura",figura,".pdf",sep = ""),latex = T)
cat("\n")
figura <- figura + 1
tabela <- tabela + 1
}
levels(dados$classific)
summary(dados)
#####Modelos de Regressão#####
dados$classific <- as.numeric(as.character(mapvalues(dados$classific,levels(dados$classific),c(1,0))))
summary(dados)
m <- auto_modelo(dados = dados,resp = "classific",exp = dic$var[dic$var_exp == 1],
modelo = "logistica",latex = T,excel = T,nomes = dic$label[dic$var_exp == 1],
arquivo = "tabelas_camila.xlsx",planilha = paste("Tabela",tabela),anexar = T,digits = 2)
View(m)
table(dados$classific,dados$hist_neo)
prop.table(table(dados$classific,dados$hist_neo),1)
prop.table(table(dados$classific,dados$hist_neo),2)
a <- glm(classific ~ hist_neo,family = binomial(),data = dados)
summary(a)
library(caret)
install.packages("caret")
library(lubridate)
?day
dados$cor <- NA
p <- ggplot(tmp,aes(x = day,y = value,colour = cor)) + theme_solarized(light = FALSE) +
xlab("Data") + facet_wrap(indice~.,scales = "free_y",) + geom_point() + geom_line(aes(group = 1),color = "white") +
scale_colour_manual(values = c("green","red","white")) +
scale_x_continuous(breaks = as.numeric(seq.Date(from = ymd(ini_quar),to = ymd(end_quar),by = 3)),
labels = paste(format.Date(seq.Date(from = ymd(ini_quar),to = ymd(end_quar),by = 3),"%d"),"/",
format.Date(seq.Date(from = ymd(ini_quar),to = ymd(end_quar),by = 3),"%m"),
sep = ""))
library(facetscales)
dias_padrao_pan
match(c(1,2,3),c(2,4,5,3,2,1))
#Get PNG
get_png <- function(filename) {
grid::rasterGrob(image = png::readPNG(filename))
}
#Calcula os indices
indice <- function(iso,media,desvio){
v <- media + 2*desvio
a <- ifelse(v >= 1,NA,as.numeric(iso > v)*(iso - v)/(1-v))
return(a)
}
indice_relativo <- function(iso,media){
a <- 100*(iso/media - 1)
return(a)
}
#Mean e sd trimming min and max
mean_trim <- function(x){
x <- x[!(x %in% c(min(x,na.rm = T),max(x,na.rm = T)))]
return(mean(x = x,na.rm = T))
}
mean_pan <- function(iso,day){
iso <- iso[order(day,decreasing = F)]
d <- day[order(day,decreasing = F)]
m <- unlist(imap(1:length(iso),~ mean(iso[1:(.x - 1)])))
names(m) <- d
m <- m[match(x = as.character(names(m)),table = as.character(day))]
return(m)
}
# sd_pan <- function(iso,day){
#   iso <- iso[order(day,decreasing = F)]
#   m <- unlist(imap(1:length(iso),~ sd(iso[1:(.x - 1)])))
#   return(m)
# }
last_pan <- function(iso,day){
iso <- iso[order(day,decreasing = F)]
d <- day[order(day,decreasing = F)]
m <- c(NA,unlist(imap(1:length(iso),~ iso[.x - 1])))
names(m) <- d
m <- m[match(x = as.character(names(m)),table = as.character(day))]
return(m)
}
#Generate map
generate_map <- function(d,dados,shp,s){
dados_dia <- dados %>% filter(day == d) %>% select(reg_name,indice)
names(dados_dia)[1] <- "id"
dados_mapa <- inner_join(x = shp,y = dados_dia,by = c("id","id"))
p <- ggplot(dados_mapa,aes(x=long, y = lat, group = group,fill = indice)) +
geom_polygon(color = "black") +
theme_bw() + ylab("") + xlab("Índice de Isolamento Social") +
scale_fill_gradientn("",colours = rc,na.value = "transparent",
limits = c(0,max(dados$indice,na.rm = T)),
breaks = c(min(dados$indice,na.rm = T),max(dados$indice,na.rm = T)),
labels = c("Dentro do Normal","Todos em Isolamento")) +
ggtitle(paste("Índice de Isolamento Social\n",s,"-",format.Date(d,"%d/%m/%Y"),
"\nPara mais informações acesse www.ime.usp.br/~pedrosp/covid19/",
sep = "")) +
theme(legend.title = element_text(face = "bold"),legend.position = "bottom") +
theme(plot.title = element_text(face = "bold"),
legend.text = element_text(face = "bold",size = 15,color = c("red","green")),
legend.box.margin = unit(x=c(0,0,0,0),units="mm"),
legend.key.width=unit(3.5,"cm"),
axis.title = element_text(face = "bold",size = 20))
p
dados_dia$d <- format.Date(d,"%d/%m/%Y")
names(dados_dia) <- c("Cidade","Índice de Isolamento Social","Dia")
return(list("p" = p,"tab" = dados_dia))
}
gerar_mapas <- function(dados,shp,s){
return(function(d) generate_map(d = d,dados = dados,shp = shp,s = s))
}
#Tirar acento
acento <- function(x) iconv(x, to = "ASCII//TRANSLIT")
#Test if date is valid
is.valid.date <- function(date){
month_30 <- c(4,6,9,11)
year <- as.numeric(substr(x = date,start = 1,stop = 4))
month <- as.numeric(substr(x = date,start = 6,stop = 7))
day <- as.numeric(substr(x = date,start = 9,stop = 10))
if(year < 2020 || month == 0 || month > 12 || day < 0 || day > 31)
return(FALSE)
else if(month %in% month_30 && day == 31)
return(FALSE)
else if(month == 2 && day > 29)
return(FALSE)
else if(month == 2 && day == 29 && !is.leap(year))
return(FALSE)
else
return(TRUE)
}
#Test if a year is leap year
is.leap <- function(year){
return(year%%4 == 0)
}
#Positive log
mod_log <- function(x){
return(ifelse(x >= 1,log(x),0))
}
library(devtools)
document()
warnings()
warnings()
document()
warnings()
warnings()
document()
warnings()
library(mdyn)
build_manual()
document()
build_manual()
library(mdyn)
dia <- "2020-04-26"
library(ggplot2)
library(htmlwidgets)
library(tidyverse)
library(lubridate)
library(grid)
library(data.table)
library(DescTools)
library(plyr)
library(rgdal)
library(ggthemes)
library(raster)
library(rgeos)
library(mapview)
library(sf)
library(svMisc)
library(leaflet.extras)
library(leaflet.providers)
library(htmltools)
library(leaflet)
library(grid)
library(gridExtra)
library(devtools)
#install_github("dmarcondes/mdyn")
library(mdyn)
isolation_map(dia)
library(devtools)
document()
setwd("~/Downloads")
library(mdyn)
plotRisk_cases(day = "2020-05-04")
