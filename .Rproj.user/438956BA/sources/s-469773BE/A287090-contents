#' @export
#' @title Medidas resumo automáticas de duas variáveis
#'
#' @description Constrói uma tabela com as estatísticas descritivas de duas variáveis.
#'
#' @details Se as duas varipaveis forem fatores, então é equivalente a aplicar a função \emph{tabela_frequencia}.
#' Se uma variável for fator e a outra numérica, é equivalente a aplicar a função \emph{medidas_resumo}.
#'
#' @param x Vetor ou data frame de variáveis quantitativas.
#' @param y Vetor.
#' @param estatististicas Uma lista com as funções que devem ser aplicadas para obter as estatísticas
#' descritivas.
#' @param tipo Tipo de tabela. Deve ser "f" para frequência, "p" para porcentagem total, "pc" par porcentagem por coluna,"pl" para porcentagem por linha,
#' "fp" para frequência e porcentagem total, "fpc" para frequência e porcentagem por coluna, "fpl" para frequência e porcentagem por linha.
#' @param margem Lógico, se deve ou não adicionar margens à tabela.
#' @param corr Qual correlação utilizar ("spearman" ou "pearson")
#' @param pvalor Se deve ou não apresentar os p-valores dos testes de correlação na parte
#' inferior da matriz. Deve ser "superior", "asterisco" ou "FALSE". Se "asterisco", "*" significa significante a
#' 10%, "**" significante a 5% e "***" significante a 1%.
#' @param teste Teste estatístico a ser realizado. Pode ser "fisher" ou "qui-quadrado" se x e y forem fatores; ou então "F" ou "kruskal" se x for um fator
#' com três categorias ou mais e y for numérica; ou então "t" ou "wilcoxon" se x for fator com duas categorias e y for numérica.
#' @param paired Lógico, se o teste realizado deve ser pareado.
#' @param legenda Legenda da tabela no Latex.
#' @param labx Label da variável X.
#' @param laby Label da variável Y.
#' @param latex Lógico, se deve ou não exportar para Latex.
#' @param excel Lógico, se deve ou não exportar para Excel.
#' @param arquivo Caminho para arquivo .xlsx para exportar para excel.
#' @param planilha Nome da planilha que deve ser salvo no Excel.
#' @param anexar Lógico, se a planilha deve ser anexada ao arquivo Excel, ou se um novo arquivo deve ser criado.
#' @param digits Número de digitos na tabela.
#' @return Uma tabela em formato data.frame.
auto_resumo <- function(x,y = NULL,estatisticas = lista_resumo,tipo = "f",margem = FALSE,corr = "pearson",
                        pvalor = FALSE,teste = "nenhum",paired = F,legenda = NULL,labx = "X",laby = "Y",latex = FALSE,excel = FALSE,arquivo = "Planilha.xlsx",
                        planilha = "Planilha 1",anexar = FALSE,digits = 0){
  if(is.factor(x) & (is.null(y) || is.factor(y))){
    if(teste != "nenhum"){
      if(is.null(y)){
        warning("Não é possível realizar testes, pois há apenas uma variável.")
        teste <- "nenhum"
      }
      else{
        if(teste == "fisher"){
          p <- fisher.test(x = x,y = y)
          p <- p$p.value
          if(p < 0.001)
            p <- "p < 0.001"
          else
            p <- paste("(p = ",round(p,3),").",sep = "")
        }
        else if(teste == "qui-quadrado"){
          p <- chisq.test(x = x,y = y)
          p <- p$p.value
          if(p < 0.001)
            p <- "(p < 0.001)."
          else
            p <- paste("(p = ",round(p,3),").",sep = "")
        }
        else{
          warning(paste("Não é possível realizar o teste",teste,"pois as duas variáveis não são fatores ou esse teste não está disponível."))
          teste <- "nenhum"
        }
      }
    }

    if(is.null(legenda)){
      if(is.null(y)){
        legenda <- paste("Frequência da variável",labx,"na amostra.")
      }
      else{
        if(teste == "nenhum")
          legenda <- paste("Frequência das variáveis",labx,"e",laby,"na amostra.")
        else
          legenda <- paste("Frequência das variáveis",labx,"e",laby,"na amostra",p)
      }
    }
    else if(teste != "nenhum")
      legenda <- paste(legenda,p)

    tabela <- tabela_frequencia(x = x,y = y,tipo = tipo,margem = margem,legenda = legenda,latex = latex,
                                excel = excel,arquivo = arquivo,planilha = planilha,anexar = anexar,digits = digits)
  }
  if(is.numeric(x) & (is.null(y) || is.factor(y))){
    if(teste != "nenhum"){
      if(is.null(y)){
        warning("Não é possível realizar testes, pois há apenas uma variável.")
        teste <- "nenhum"
      }
      else{
        if(teste == "F"){
          if(length(levels(y)) == 2)
            warning("Equivalente ao Teste t, pois y tem apenas duas categorias")
          p <- lm(x ~ y)
          p <- anova(p)
          p <- p$`Pr(>F)`[1]
          if(p < 0.001)
            p <- "p < 0.001"
          else
            p <- paste("(p = ",round(p,3),").",sep = "")
        }
        else if(teste == "kruskal"){
          if(length(levels(y)) == 2)
            warning("Melhor realizar o Teste de Wilcoxon, pois y tem apenas duas categorias")
          p <- kruskal.test(x = x,g = y)
          p <- p$p.value
          if(p < 0.001)
            p <- "(p < 0.001)."
          else
            p <- paste("(p = ",round(p,3),").",sep = "")
        }
        else if(teste == "t"){
          if(length(levels(y)) > 2){
            warning("Não é possível realizar o Teste t, pois y tem apenas duas categorias")
            teste <- "nenhum"
          }
          else{
            p <- t.test(x = x[y == levels(y)[1]],y = x[y == levels(y)[2]],paired = paired)
            p <- p$p.value
            if(p < 0.001)
              p <- "(p < 0.001)."
            else
              p <- paste("(p = ",round(p,3),").",sep = "")
          }
        }
        else if(teste == "wilcoxon"){
          if(length(levels(y)) > 2){
            warning("Não é possível realizar o Teste de Wilcoxon, pois y tem apenas duas categorias")
            teste <- "nenhum"
          }
          else{
            p <- wilcox.test(x = x[y == levels(y)[1]],y = x[y == levels(y)[2]],paired = paired)
            p <- p$p.value
            if(p < 0.001)
              p <- "(p < 0.001)."
            else
              p <- paste("(p = ",round(p,3),").",sep = "")
          }
        }
        else{
          warning(paste("Não é possível realizar o teste",teste,"pois as variáveis não são do tipo necessário ou esse teste não está disponível."))
          teste <- "nenhum"
        }
      }
    }

    if(is.null(legenda)){
      if(is.null(y)){
        legenda <- paste("Estatísticas descritivas da variável",labx,"na amostra.")
      }
      else{
        if(teste == "nenhum")
          legenda <- paste("Estatísticas descritivas da variável",labx,"pela variável",laby,"na amostra.")
        else
          legenda <- paste("Estatísticas descritivas da variável",labx,"pela variável",laby,"na amostra",p)
      }
    }
    else if(teste != "nenhum")
      legenda <- paste(legenda,p)

    tabela <- medidas_resumo(x = x,y = y,estatisticas = estatisticas,legenda = legenda,latex = latex,
                             excel = excel,arquivo = arquivo,planilha = planilha,anexar = anexar,digits = digits)
  }
  if(is.factor(x) & is.numeric(y)){
    if(teste != "nenhum"){
      if(teste == "F"){
        if(length(levels(y)) == 2)
          warning("Equivalente ao Teste t, pois y tem apenas duas categorias")
        p <- lm(y ~ x)
        p <- anova(p)
        p <- p$`Pr(>F)`[1]
        if(p < 0.001)
          p <- "p < 0.001"
        else
          p <- paste("(p = ",round(p,3),").",sep = "")
      }
      else if(teste == "kruskal"){
        if(length(levels(x)) == 2)
          warning("Melhor realizar o Teste de Wilcoxon, pois y tem apenas duas categorias")
        p <- kruskal.test(x = y,g = x)
        p <- p$p.value
        if(p < 0.001)
          p <- "(p < 0.001)."
        else
          p <- paste("(p = ",round(p,3),").",sep = "")
      }
      else if(teste == "t"){
        if(length(levels(y)) > 2){
          warning("Não é possível realizar o Teste t, pois y tem mais que duas categorias")
          teste <- "nenhum"
        }
        else{
          p <- t.test(x = y[x == levels(x)[1]],y = y[x == levels(x)[2]],paired = paired)
          p <- p$p.value
          if(p < 0.001)
            p <- "(p < 0.001)."
          else
            p <- paste("(p = ",round(p,3),").",sep = "")
        }
      }
      else if(teste == "wilcoxon"){
        if(length(levels(y)) > 2){
          warning("Não é possível realizar o Teste de Wilcoxon, pois y tem mais que duas categorias")
          teste <- "nenhum"
        }
        else{
          p <- wilcox.test(x = y[x == levels(x)[1]],y = y[x == levels(x)[2]],paired = paired)
          p <- p$p.value
          if(p < 0.001)
            p <- "(p < 0.001)."
          else
            p <- paste("(p = ",round(p,3),").",sep = "")
        }
      }
      else{
        warning(paste("Não é possível realizar o teste",teste,"pois as variáveis não são do tipo necessário ou esse teste não está disponível."))
        teste <- "nenhum"
      }
    }

    if(is.null(legenda)){
      if(teste == "nenhum")
        legenda <- paste("Estatísticas descritivas da variável",laby,"pela variável",labx,"na amostra.")
      else
        legenda <- paste("Estatísticas descritivas da variável",laby,"pela variável",labx,"na amostra",p)
    }
    else if(teste != "nenhum")
      legenda <- paste(legenda,p)

    tabela <- medidas_resumo(x = y,y = x,estatisticas = estatisticas,legenda = legenda,latex = latex,
                             excel = excel,arquivo = arquivo,planilha = planilha,anexar = anexar,digits = digits)
  }
  if(is.numeric(x) & is.numeric(y)){
    if(is.null(legenda))
      legenda <- paste("Correlação entre as variáveis ",labx," e ",laby,".",sep = "")
    tabela <- correlacao(x = x,y = y,corr = corr,pvalor = pvalor,latex = latex,excel = excel,legenda = legenda,
                                arquivo = arquivo,planilha = planilha,anexar = anexar,digits = digits)
  }
  if(!is.null(ncol(x))){
    if(is.null(legenda))
      legenda <- "Correlação entre as variáveis da pesquisa."
    tabela <- correlacao(x = x,corr = corr,pvalor = pvalor,latex = latex,excel = excel,legenda = legenda,
                                arquivo = arquivo,planilha = planilha,anexar = anexar,digits = digits)
  }

  return(data.frame(tabela))
}
